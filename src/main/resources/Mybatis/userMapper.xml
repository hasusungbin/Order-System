<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="UserDAO">
	<select id="getUserType" parameterType="string" resultType="string">
		SELECT userType FROM user WHERE userID = #{userID}
	</select>

<!-- 현재 로그인한 사용자의 userName 가져오기 -->
	<select id="getUserName" parameterType="string" resultType="string">
		SELECT userName FROM user WHERE userID = #{userID}
	</select>

<!-- 현재 로그인한 사용자의 userCompany 가져오기 -->
	<select id="getUserCompany" parameterType="string" resultType="string">
		SELECT userCompany FROM user WHERE userID = #{userID}
	</select>

<!-- 같은 userCompany에 속한 sales 유저 목록 가져오기 -->
	<select id="getSalesUsersInCompany" parameterType="string" resultType="string">
		SELECT userName FROM user WHERE userCompany = #{userCompany} AND (userType = 'sales' OR userType = 'manager')
	</select>
	
	<select id="getUserByCompany" parameterType="string" resultType="user.User">
        SELECT * FROM user WHERE userCompany = #{userCompany}
    </select>
	
	<select id="isUserExists" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM user WHERE userID = #{userID}
    </select>
	
	<!-- 새로운 유저 등록 -->
    <insert id="insertUser" parameterType="user.User">
        INSERT INTO user (userID, userPassword, userName, userType, userPhoneNumber, userCompany, userTeam) 
        VALUES (#{userID}, #{userPassword}, #{userName}, #{userType}, #{userPhoneNumber}, #{userCompany}, #{userTeam})
    </insert>
	
	<!-- userType이 admin일 경우: 자기 자신을 제외한 모든 사용자 조회 -->
    <select id="getAdminUserList" parameterType="string" resultType="user.User">
        SELECT * FROM user
        WHERE userID != #{userID}
    </select>

    <!-- userType이 manager일 경우: 같은 회사의 사용자만 조회 (자기 자신 제외) -->
    <select id="getManagerUserList" parameterType="map" resultType="user.User">
        SELECT * FROM user
        WHERE userCompany = #{userCompany}
        AND userID != #{userID}
    </select>
	
	<delete id="deleteUser">
        DELETE FROM user WHERE userID IN 
        <foreach item="userID" collection="list" open="(" separator="," close=")">
            #{userID}
        </foreach>
    </delete>
	
	<select id="getUserById" resultType="user.User">
        SELECT * FROM user WHERE userID = #{userID}
    </select>
	
	<update id="updateUser">
        UPDATE user
        <set>
			userID = #{userID},
			userPassword = #{userPassword},
			userName = #{userName},
			userType = #{userType},
			userPhoneNumber = #{userPhoneNumber},
			userCompany = #{userCompany},
			userTeam = #{userTeam}
		</set>
        WHERE userID = #{userID}
    </update>
	
	<select id="login" parameterType="user.User" resultType="user.User">
        SELECT * 
        FROM user 
        WHERE userID = #{userID} 
        AND userPassword = #{userPassword}
    </select>
	
	<select id="getUserList" resultType="user.User">
        SELECT 
            userID, 
            userPassword, 
            userName, 
            userType, 
            userPhoneNumber, 
            userCompany, 
            userTeam
        FROM USER
        WHERE userType != 'admin'
    </select>
	
	<select id="getUserTypeByID" parameterType="String" resultType="String">
		SELECT userType
		FROM user
		WHERE userID = #{userID}
	</select>
</mapper>
